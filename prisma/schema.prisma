// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  name          String?
  password      String
  role          UserRole  @default(USER)
  active        Boolean   @default(true)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  lastLogin     DateTime?
  
  // NextAuth fields
  accounts      Account[]
  sessions      Session[]
  
  // Acompanhamentos relationship
  acompanhamentos Acompanhamento[]

  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

enum UserRole {
  ADMIN
  USER
}

model Acompanhamento {
  id                  String   @id @default(cuid())
  nome                String
  descricao           String
  mostrar_card_resumo Boolean  @default(true)
  userId              String
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  
  user   User                   @relation(fields: [userId], references: [id], onDelete: Cascade)
  cursos AcompanhamentoCurso[]
  
  @@map("acompanhamentos")
}

model AcompanhamentoCurso {
  id               String   @id @default(cuid())
  acompanhamentoId String
  courseId         String
  courseName       String
  shortName        String?
  fullName         String
  ativo            Boolean  @default(true)
  status           AcompanhamentoStatus @default(CURSANDO)
  progress         Float    @default(0)
  grade            Float?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  
  acompanhamento Acompanhamento @relation(fields: [acompanhamentoId], references: [id], onDelete: Cascade)
  
  @@unique([acompanhamentoId, courseId])
  @@map("acompanhamento_cursos")
}

enum AcompanhamentoStatus {
  CURSANDO
  REPROVADO_EVADIDO
  CONCLUIDO
}
